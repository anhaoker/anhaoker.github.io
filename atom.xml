<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[An Honglei ’s Blog]]></title>
  <link href="www.anhaoker.com/atom.xml" rel="self"/>
  <link href="www.anhaoker.com/"/>
  <updated>2018-10-22T09:28:03+08:00</updated>
  <id>www.anhaoker.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[Python 环境部署]]></title>
    <link href="www.anhaoker.com/15396013955359.html"/>
    <updated>2018-10-15T19:03:15+08:00</updated>
    <id>www.anhaoker.com/15396013955359.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-text">yum -y install git gcc make patch zlib-devel gdbm-devel openssl-devel sqlite-devel bzip2-devel readline-devel
</code></pre>

<p>普通用户下：</p>

<pre><code class="language-text">curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
cat &gt;&gt; ~/.bash_profile &lt;&lt;EOF
export PATH=&quot;\$HOME/.pyenv/bin:\$PATH&quot;
eval &quot;\$(pyenv init -)&quot;
eval &quot;\$(pyenv virtualenv-init -)&quot;
EOF
source ~/.bash_profile  
exec $SHELL

#pyenv update

pyenv install 3.5.3 -v
pyenv virtualenv 3.5.3 py35
pyenv versions

mkdir projects &amp;&amp; cd projects
pyenv local py35
pyenv version

mkdir ~/.pip
cat &gt; ~/.pip/pip.conf &lt;&lt; EOF
[global]
index-url=https://mirrors.aliyun.com/pypi/simple/
trusted-host=mirrors.aliyun.com
EOF
pip -V
pip install --upgrade pip


pip install ipython
ipython

pip install jupyter
jupyter notebook help
jupyter notebook password
jupyter notebook --ip=0.0.0.0 --no-browser
</code></pre>

<p>MAC</p>

<p>anaconda套件(jupyter)：</p>

<pre><code class="language-text">wget https://repo.anaconda.com/archive/Anaconda3-5.3.0-MacOSX-x86_64.pkg
</code></pre>

<p>pyenv+ipython+jupyter</p>

<pre><code class="language-text">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
brew update
brew install pyenv
python --version


export PATH=&quot;/usr/local/opt/openssl/bin:$PATH&quot;
export LDFLAGS=&quot;-L/usr/local/opt/openssl/lib&quot;
export CPPFLAGS=&quot;-I/usr/local/opt/openssl/include&quot;
export PKG_CONFIG_PATH=&quot;/usr/local/opt/openssl/lib/pkgconfig&quot;


brew install zlib
ln -s /usr/local/Cellar/zlib/1.2.11/include/* /usr/local/include
ln -s /usr/local/Cellar/zlib/1.2.11/lib/* /usr/local/lib



brew install pyenv-virtualenv
echo &#39;eval &quot;$(pyenv init -)&quot;&#39; &gt;&gt; ~/.zshrc
echo &#39;eval &quot;$(pyenv virtualenv-init -)&quot;&#39; &gt;&gt; ~/.zshrc
source ~/.zshrc


pyenv install 3.5.3 -v
pyenv virtualenv 3.5.3 py35
pyenv versions

mkdir projects &amp;&amp; cd projects
pyenv local py35
pyenv version

mkdir ~/.pip
cat &gt; ~/.pip/pip.conf &lt;&lt; EOF
[global]
index-url=https://mirrors.aliyun.com/pypi/simple/
trusted-host=mirrors.aliyun.com
EOF
pip -V
pip install --upgrade pip


pip install ipython
ipython

pip install jupyter
jupyter notebook help
jupyter notebook password
jupyter notebook --ip=0.0.0.0 --no-browser
</code></pre>

<p>常用命令</p>

<pre><code class="language-text">pyenv install --list # 列出可安装版本
pyenv install &lt;version&gt; # 安装对应版本
pyenv install -v &lt;version&gt; # 安装对应版本，若发生错误，可以显示详细的错误信息
pyenv versions # 显示当前使用的python版本
pyenv which python # 显示当前python安装路径
pyenv global &lt;version&gt; # 设置默认Python版本
pyenv local &lt;version&gt; # 当前路径创建一个.python-version, 以后进入这个目录自动切换为该版本
pyenv shell &lt;version&gt; # 当前shell的session中启用某版本，优先级高于global 及 local
</code></pre>

<p>使用virtualenv</p>

<pre><code class="language-text">pyenv virtualenv env # 从默认版本创建虚拟环境
pyenv virtualenv 3.6.4 env-3.6.4 # 创建3.6.4版本的虚拟环境
pyenv activate env-3.6.4 # 激活 env-3.6.4 这个虚拟环境
pyenv deactivate # 停用当前的虚拟环境

自动激活
使用pyenv local 虚拟环境名
会把`虚拟环境名`写入当前目录的.python-version文件中
关闭自动激活 -&gt; pyenv deactivate
启动自动激活 -&gt; pyenv activate env-3.6.4
pyenv local env-3.6.4

pyenv uninstall env-3.6.4 # 删除 env-3.6.4 这个虚拟环境

</code></pre>

<p>链接：<a href="https://www.jianshu.com/p/af1f8d7b6b31">https://www.jianshu.com/p/af1f8d7b6b31</a></p>

<p>Mac下安装python报错，导致jupyter无法使用<br/>
WARNING: The Python sqlite3 extension was not compiled. Missing the SQLite3 lib?</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[seafile 破解版安装]]></title>
    <link href="www.anhaoker.com/15362420848596.html"/>
    <updated>2018-09-06T21:54:44+08:00</updated>
    <id>www.anhaoker.com/15362420848596.html</id>
    <content type="html"><![CDATA[
<p>cat &gt; /etc/nginx/conf.d/seafile.conf &lt;&lt;&#39;EOF&#39;<br/>
server {<br/>
    listen 80;<br/>
    server_name seafile.example.com;</p>

<pre><code class="language-text">proxy_set_header X-Forwarded-For $remote_addr;

location / {
     proxy_pass         http://127.0.0.1:8000;
     proxy_set_header   Host $host;
     proxy_set_header   X-Real-IP $remote_addr;
     proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
     proxy_set_header   X-Forwarded-Host $server_name;
     proxy_set_header   X-Forwarded-Proto $scheme;
     proxy_read_timeout  1200s;

     # used for view/edit office file via Office Online Server
     client_max_body_size 0;

     access_log      /var/log/nginx/seahub.access.log;
     error_log       /var/log/nginx/seahub.error.log;
}

location /seafhttp {
    rewrite ^/seafhttp(.*)$ $1 break;
    proxy_pass http://127.0.0.1:8082;
    client_max_body_size 0;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_connect_timeout  36000s;
    proxy_read_timeout  36000s;
}
location /media {
    root /opt/seafile/seafile-server-latest/seahub;
}
location /seafdav {
    fastcgi_pass    127.0.0.1:8080;
    fastcgi_param   SCRIPT_FILENAME     $document_root$fastcgi_script_name;
    fastcgi_param   PATH_INFO           $fastcgi_script_name;
    fastcgi_param   SERVER_PROTOCOL     $server_protocol;
    fastcgi_param   QUERY_STRING        $query_string;
    fastcgi_param   REQUEST_METHOD      $request_method;
    fastcgi_param   CONTENT_TYPE        $content_type;
    fastcgi_param   CONTENT_LENGTH      $content_length;
    fastcgi_param   SERVER_ADDR         $server_addr;
    fastcgi_param   SERVER_PORT         $server_port;
    fastcgi_param   SERVER_NAME         $server_name;
    fastcgi_param   REMOTE_ADDR         $remote_addr;

    client_max_body_size 0;

    access_log      /var/log/nginx/seafdav.access.log;
    error_log       /var/log/nginx/seafdav.error.log;
}
</code></pre>

<p>}<br/>
EOF</p>

<p>cat &gt; /etc/nginx/nginx.conf &lt;&lt;&#39;ENDOFFILE&#39;<br/>
user nginx nginx;<br/>
worker_processes 4;</p>

<p>events {<br/>
  worker_connections 8096;<br/>
  multi_accept on;<br/>
  use epoll;<br/>
}</p>

<p>pid /var/run/nginx.pid;<br/>
worker_rlimit_nofile 40000;</p>

<p>http {<br/>
  server_tokens off;<br/>
  server_names_hash_bucket_size 128;<br/>
  client_max_body_size 50M;<br/>
  include /etc/nginx/mime.types;<br/>
  default_type application/octet-stream;<br/>
  log_format main &#39;\(remote_addr - \)remote_user [\(time_local] &quot;\)request&quot; &#39;<br/>
  &#39;\(status \)body_bytes_sent &quot;\(http_referer&quot; &#39;<br/>
  &#39;&quot;\)http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;<br/>
  access_log /var/log/nginx/access.log main;<br/>
  error_log /var/log/nginx/error.log warn;<br/>
  sendfile on;<br/>
  tcp_nopush on;<br/>
  tcp_nodelay on;<br/>
  client_body_timeout 12;<br/>
  client_header_timeout 12;<br/>
  keepalive_timeout 15;<br/>
  send_timeout 10;<br/>
  # Fully disabled gzip compression to mitigate Django BREACH attack: <a href="https://www.djangoproject.com/weblog/2013/aug/06/breach-and-django/">https://www.djangoproject.com/weblog/2013/aug/06/breach-and-django/</a><br/>
  gzip off;<br/>
  #gzip_vary on;<br/>
  #gzip_proxied expired no-cache no-store private auth any;<br/>
  #gzip_comp_level 9;<br/>
  #gzip_min_length 10240;<br/>
  #gzip_buffers 16 8k;<br/>
  #gzip_http_version 1.1;<br/>
  #gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/xml font/woff2;<br/>
  #gzip_disable &quot;MSIE [1-6].&quot;;<br/>
  include /etc/nginx/conf.d/*.conf;<br/>
}<br/>
ENDOFFILE</p>

<p>启动脚本；</p>

<p>cat &gt; /etc/systemd/system/seafile.service &lt;&lt;&#39;EOF&#39;<br/>
[Unit]<br/>
Description=Seafile Server<br/>
After=network.target mariadb.service</p>

<p>[Service]<br/>
Type=oneshot<br/>
ExecStart=/usr/local/haiwen/seafile-server-latest/seafile.sh start<br/>
ExecStop=/usr/local/haiwen/seafile-server-latest/seafile.sh stop<br/>
RemainAfterExit=yes<br/>
User=root<br/>
Group=root</p>

<p>[Install]<br/>
WantedBy=multi-user.target<br/>
EOF<br/>
systemctl enable seafile</p>

<p>cat &gt; /etc/systemd/system/seahub.service &lt;&lt;&#39;EOF&#39;<br/>
[Unit]<br/>
Description=Seafile Seahub<br/>
After=network.target seafile.service</p>

<p>[Service]<br/>
ExecStart=/usr/local/haiwen/seafile-server-latest/seahub.sh start 8000<br/>
ExecStop=/usr/local/haiwen/seafile-server-latest/seahub.sh stop<br/>
User=root<br/>
Group=root<br/>
Type=oneshot<br/>
RemainAfterExit=yes</p>

<p>[Install]<br/>
WantedBy=multi-user.target<br/>
EOF<br/>
systemctl enable seahub</p>

<h1 id="toc_0">Seafile restart script</h1>

<p>cat &gt; /usr/local/sbin/seafile-server-restart &lt;&lt; &#39;EOF&#39;</p>

<h1 id="toc_1">!/bin/bash</h1>

<p>for ACTION in stop start ; do<br/>
    for SERVICE in seafile seahub ; do<br/>
      systemctl \({ACTION} \){SERVICE}<br/>
    done<br/>
done<br/>
EOF<br/>
chmod 700 /usr/local/sbin/seafile-server-restart</p>

<p>./setup-seafile-mysql.sh auto -u seafile -w \({SQLSEAFILEPW} -r \){SQLROOTPW}</p>

<p>cat &gt;&gt; ./seahub_settings.py &lt;&lt;EOF</p>

<p>CACHES = {<br/>
    &#39;default&#39;: {<br/>
        &#39;BACKEND&#39;: &#39;django_pylibmc.memcached.PyLibMCCache&#39;,<br/>
        &#39;LOCATION&#39;: &#39;127.0.0.1:11211&#39;,<br/>
    },<br/>
    &#39;locmem&#39;: {<br/>
        &#39;BACKEND&#39;: &#39;django.core.cache.backends.locmem.LocMemCache&#39;,<br/>
    },<br/>
}<br/>
COMPRESS_CACHE_BACKEND = &#39;locmem&#39;</p>

<h1 id="toc_2">EMAIL_USE_TLS                       = False</h1>

<h1 id="toc_3">EMAIL_HOST                          = &#39;localhost&#39;</h1>

<h1 id="toc_4">EMAIL_HOST_USER                     = &#39;&#39;</h1>

<h1 id="toc_5">EMAIL_HOST_PASSWORD                 = &#39;&#39;</h1>

<h1 id="toc_6">EMAIL_PORT                          = &#39;25&#39;</h1>

<h1 id="toc_7">DEFAULT_FROM_EMAIL                  = EMAIL_HOST_USER</h1>

<h1 id="toc_8">SERVER_EMAIL                        = EMAIL_HOST_USER</h1>

<p>TIME_ZONE                           = &#39;\({TIME_ZONE}&#39;<br/>
SITE_BASE                           = &#39;http://\){IP_OR_DOMAIN}&#39;<br/>
SITE_NAME                           = &#39;Seafile Server&#39;<br/>
SITE_TITLE                          = &#39;Seafile Server&#39;<br/>
SITE_ROOT                           = &#39;/&#39;<br/>
ENABLE_SIGNUP                       = False<br/>
ACTIVATE_AFTER_REGISTRATION         = False<br/>
SEND_EMAIL_ON_ADDING_SYSTEM_MEMBER  = True<br/>
SEND_EMAIL_ON_RESETTING_USER_PASSWD = True<br/>
CLOUD_MODE                          = False<br/>
FILE_PREVIEW_MAX_SIZE               = 30 * 1024 * 1024<br/>
SESSION_COOKIE_AGE                  = 60 * 60 * 24 * 7 * 2<br/>
SESSION_SAVE_EVERY_REQUEST          = False<br/>
SESSION_EXPIRE_AT_BROWSER_CLOSE     = False</p>

<p>FILE_SERVER_ROOT                    = &#39;http://${IP_OR_DOMAIN}/seafhttp&#39;<br/>
EOF</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINUX 快捷键整理]]></title>
    <link href="www.anhaoker.com/15306935051951.html"/>
    <updated>2018-07-04T16:38:25+08:00</updated>
    <id>www.anhaoker.com/15306935051951.html</id>
    <content type="html"><![CDATA[
<p><img src="http://pb9nlfw6h.bkt.clouddn.com/15307636793821.jpg" alt=""/></p>

<ul>
<li>
<a href="#toc_0">快捷键</a>
<ul>
<li>
<a href="#toc_1">ctrl</a>
</li>
<li>
<a href="#toc_2">Alt</a>
</li>
<li>
<a href="#toc_3">ESC</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">功能分类</a>
<ul>
<li>
<a href="#toc_5">剪切板操作</a>
</li>
<li>
<a href="#toc_6">光标操作</a>
</li>
<li>
<a href="#toc_7">文本处理操作</a>
</li>
<li>
<a href="#toc_8">任务处理操作</a>
</li>
<li>
<a href="#toc_9">标签页处理操作</a>
</li>
<li>
<a href="#toc_10">窗口操作</a>
</li>
<li>
<a href="#toc_11">历史命令操作</a>
</li>
<li>
<a href="#toc_12">其他操作</a>
</li>
</ul>
</li>
<li>
<a href="#toc_13">参考：</a>
</li>
<li>
<a href="#toc_14">示例操作</a>
</li>
</ul>


<h2 id="toc_0">快捷键</h2>

<p><img src="http://pb9nlfw6h.bkt.clouddn.com/15307620204271.jpg" alt=""/></p>

<h3 id="toc_1">ctrl</h3>

<p>作为快捷键的基础，在linux系统的centos下，我们经常使用如下参数。</p>

<pre><code class="language-text">a——光标回到命令行首。 （a：ahead）

b——光标向行首移动一个字符。 （b：backwards）

c——中断终端中正在执行的任务。

d——删除当前一个字符或从 shell 提示中注销（并关闭）就不必键入 exit 或 logout 。

e——光标回到命令行尾。 （e： end）

f——光标向行尾移动一个字符。 （f： forwards）

h——删除光标前一个字符，同backspace 键相同。

i——相当于Tab键。

k——删除光标处到行尾的字符。

l——清屏，相当于clear。

o/m——相当Enter键。

n——下一个使用的历史命令。（n： next ）

p——上一个使用的历史命令。 （p： previous）

r——快速检索历史命令。（r： retrieve）。

s——使终端发呆，静止，可以使快速输出的终端屏幕停下来。

q——退出Ctrl+s引起的发呆。

t——交换光标所在字符和其前的字符。

u——清除光标前至行首间的所有内容。

w——删除光标处到行首（以空格和标点为分隔）的字符。

x——同上但再按一次会从新回到原位置。

y——粘贴或者恢复上次的删除。

z——使正在运行在终端的任务，运行于后台。 （可用fg恢复）

[——相当于Esc键。

</code></pre>

<h3 id="toc_2">Alt</h3>

<p>多用于桌面环境和bash（shell环境中多数未开启）</p>

<pre><code class="language-text">
b——光标往回（backward）移动到前一个单词

c——将光标所在字符到词尾改为首字母大写

u——将光标所在字符到词尾转化为大写

l——将光标所在字符到词尾转化为小写

r——撤销对从历史记录中带来的命令的修改。

F2——运行

F4——关闭当前窗口

F9——最小化当前窗口

F10——最大化当前窗口

n——n为1-9数字，快速切换标签页

Tab——切换窗口

按住左键——移动窗口（或在最下面的任务栏滚动鼠标滑轮）


</code></pre>

<p>** Meta被标记为ALT键(在我所使用的键盘上，尽管有ALT键，但其并不是作为Meta功能使用, Macbook上也没有单独的Meta键)，此时可以选用其中的一个ATL键通过设置作为Meta键。如果没有ALT键，可以通过先按ESC键，再按相应的字母键实现Meta组合件的功能。<br/>
但是实际上先按ESC，再按相应的组合键，前后要按两次以上，很不方便，通常都是通过修改设置，将ALT复用为Meta键。 **</p>

<h3 id="toc_3">ESC</h3>

<pre><code class="language-text">b – 光标移动到所在单词词首。

f – 移动到光标所在单词词末。

t – 交换最后两个单词。

u – 将当前单词光标后的字母转为大写。

l – 将当前单词光标后的字母转为小写。

r – 撤销对从历史记录中带来的命令的修改。

. （注意末尾的点号） – 使用上一条命令的最后一个单词。

</code></pre>

<h2 id="toc_4">功能分类</h2>

<p><img src="http://pb9nlfw6h.bkt.clouddn.com/15307621177428.jpg" alt=""/></p>

<h3 id="toc_5">剪切板操作</h3>

<pre><code class="language-text">Ctrl+Shift+C  复制
Ctrl+Shift+V  粘贴
</code></pre>

<h3 id="toc_6">光标操作</h3>

<pre><code class="language-text">Ctrl+A(ahead)      将光标移动到命令行开头相当于VIM里shift+^
Ctrl+E(end)    将光标移动到命令行结尾处相当于VIM里shift+$
Ctrl+LeftArrow(方向键左键)      光标移动到上一个单词的词首
Ctrl+RightArrow(方向键右键)    光标移动到下一个单词的词尾
Ctrl+F(forwards)    光标向后移动一个字符,相当与→;VIM里l
Ctrl+B(backwards) 光标向前移动一个字符,相当与←;VIM里h
Ctrl+X       在上次光标所在字符和当前光标所在字符之间跳转
Esc+B    移动到当前单词的开头
Esc+F    移动到当前单词的结尾
</code></pre>

<h3 id="toc_7">文本处理操作</h3>

<pre><code class="language-text">Ctrl+U    剪切光标至行首的内容 相当于VIM里d shift+^
Ctrl+K    剪切光标至行尾的内容 相当于VIM里d shift+$
Ctrl+W  剪切光标到词首的内容 相当于VIM里db
Alt+D    剪切光标到词尾的内容
Ctrl+D    删除光标所在字符 相当于Delete;VIM里x或者dl
Ctrl+H    删除光标前的字符 相当于Backspace;VIM里hx或者dh
Ctrl+Y    粘贴刚才所删除的字符(ctrl+u上次执行时删除的字符)
Ctrl+7    恢复刚刚的内容
Ctrl+(X U)      撤销刚才的操作（按住Ctrl的同时再先后按x和u）
Esc+T    颠倒光标相邻单词的位置
Ctrl+T    颠倒光标相邻字符的位置，并将光标移动到下一个字符
Alt+C      将光标所在字符到词尾改为首字母大写
Alt+U      将光标所在字符到词尾转化为大写
Alt+L      将光标所在字符到词尾转化为小写
Alt+R       撤消前一次动作
Ctrl+V    插入特殊字符,如Ctrl+(V Tab)加入Tab字符键
Ctrl+?      撤消前一次输入
Ctrl+(X X)   在EOL和当前光标位置移动
^oldstr^newstr    替换前一次命令中字符串   
</code></pre>

<h3 id="toc_8">任务处理操作</h3>

<pre><code class="language-text">Ctrl+C    删除整行/终止
Ctrl+L    刷新屏幕
Ctrl+S    挂起当前shell
Ctrl+Q    重新启用挂起的shell
</code></pre>

<h3 id="toc_9">标签页处理操作</h3>

<pre><code class="language-text">Shift+Ctrl+T        新建标签页
Shift+Ctrl+W        关闭标签页
Ctrl+PageUp         前一标签页
Ctrl+PageDown       后一标签页
Shift+Ctrl+PageUp   标签页左移
Shift+Ctrl+PageDown 标签页右移
Alt+1,2,3...        切换到标签页1,2,3...
</code></pre>

<h3 id="toc_10">窗口操作</h3>

<pre><code class="language-text">Shift+Ctrl+N    新建窗口
Shift+Ctrl+Q    关闭终端
F11             全屏
Ctrl+Plus       放大
Ctrl+Minus      减小
Ctrl+0          原始大小
Shift+UpArrow   向上滚屏
Shift+DownArrow 向下滚屏
Shift+PageUp    向上翻页
Shift+PageDown  向下翻页
</code></pre>

<h3 id="toc_11">历史命令操作</h3>

<pre><code class="language-text">↑(Ctrl+P(previous))      显示上一条命令
↑(Ctrl+N(next))         显示下一条命令
Ctrl+R(retrieve) String  搜索包含String字符串的命令/继续向上检索(Ctrl+S         向下检索)
Ctrl+r                  然后输入若干字符，开始向上搜索包含该字符的命令，继续按Ctrl+r，搜索上一条匹配的命令
Ctrl+s                  与Ctrl+r类似,只是正向检索
Alt+&lt;                   历史列表第一项
Alt+&gt;                   历史列表最后一项
Alt+Shift+,             历史列表第一项
Alt+Shift+.             历史列表最后一项
!$                      以上一条命令的参数做为其参数
!Num                    执行命令历史列表的第Num条命令
!!                      执行上一条命令
!?String?               执行含有String字符串的最新命令
!-n -                   倒数第N条历史命令
!-n:p -                 打印上一条命令（不执行）
!-n:gs/str1/str2/ -     将倒数第N条命令的str1替换为str2，并执行（若不加g,则仅替换第一个）
ls !$                   执行命令ls，并以上一条命令的参数为其参数
</code></pre>

<h3 id="toc_12">其他操作</h3>

<pre><code class="language-text">Ctrl+M(Ctrl+O)          相当于Enter
Esc x3(Tab x2)(Ctrl+I)  显示所有支持的命令
Ctrl+【                  相当于Esc
Ctrl+X(Shift+2)         显示可能hostname补全
Ctrl+S                  锁住终端
Ctrl+Q                  解锁终端
alt+数字键               操作的次数
Ctrl+Alt+Backspace      杀死图形化桌面会话，把你返回到登录屏幕。
Ctrl+Alt+Delete         关机和重新引导 
Ctrl+Alt+[Fn]           切换屏幕。 从 [F1] 到 [F6] 是 shell 提示屏幕， [F7] 是图形化屏幕。
Alt+Tab                 在图形化桌面环境中切换任务。在打开的任务和应用程序间切换。
</code></pre>

<h2 id="toc_13">参考：</h2>

<p><a href="https://www.cnblogs.com/nucdy/p/5251659.html">https://www.cnblogs.com/nucdy/p/5251659.html</a><br/>
<a href="https://www.cnblogs.com/webzhangnan/p/3221410.html">https://www.cnblogs.com/webzhangnan/p/3221410.html</a><br/>
<a href="https://blog.csdn.net/guyongqiangx/article/details/80602552">https://blog.csdn.net/guyongqiangx/article/details/80602552</a><br/>
<a href="https://www.linuxidc.com/Linux/2017-10/147757.htm">https://www.linuxidc.com/Linux/2017-10/147757.htm</a></p>

<h2 id="toc_14">示例操作</h2>

<pre><code class="language-text">c+l  清屏先

minuit@suse:~&gt;str1 str2 str3  #输入三个单词发现第一单词需要大写好按c+a跳到开头按a+c

minuit@suse:~&gt; Str1 str2 str3  #好现在单词就变成了现在这个样子,又发现第二个单词要全大写(这样的命令真是玩死人:( )好吧如果你当前光标在第二个单词,那直接a+u把这个单词改变,如果不在的话那按住c+a接着c+f跳到第二个单词那再a+u就OK了结果像下面所示

。

minuit@suse:~&gt; Str1 STR2 str3   #我想换过来怎么办我的位置已经在最后一个单词这个好办按住a+2+b哈哈跳到了第二个单词再来一下a+l这下第二个单词全小写了,再来一个比较典型的例子

[url]http://bbs.chinaunix.net/viewthread.php?tid=842595[/url]

标题:如何将数据文件中的每个词的第一个字母变成大写？

哈哈这个难不到我们吧因为我们已经会了a+c了

minuit@suse:~&gt; welcome to chinaunix!   #不就是变个大小写吗按住c+a接着a+3+c看看效果

minuit@suse:~&gt; Welcome To Chinaunix!  #GOOD很简单

我们再来试试替换

minuit@suse:~&gt; Welcome To Chinaunix!  #还是这三单词c+a跳到开头再接着跳到第二个单词那(因为a+t只能跟前一个单词做替换所以不能在第一个单词按a+t)按住a+t

minuit@suse:~&gt; To Welcome Chinaunix!  #现在成这样子的了如果我用再按a+2+t那又变了一个样

minuit@suse:~&gt; Chinaunix!  Welcome To   #好了来一点比较常用的

minuit@suse:~&gt;ls /tmp/               #看看下面有些什么

file1 file2 file3 ..... ..

minuit@suse:~&gt;^ls^cd         #现在再又想进入目录很简单的健入替换命令就行了在命令很长时用这个替换可以省掉很多按a+b或a+f的时间

cd /tmp/

minuit@suse:/tmp&gt;   #进入了tmp目录了

跳转的命令就不试了大家自己体会试也看不见^_^   

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPMI-DELL]]></title>
    <link href="www.anhaoker.com/15287735246134.html"/>
    <updated>2018-06-12T11:18:44+08:00</updated>
    <id>www.anhaoker.com/15287735246134.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Server端：</h2>

<h3 id="toc_1">编译安装</h3>

<p>在安装zabbix服务器的时候需要带参数---with-openipmi</p>

<h3 id="toc_2">修改配置</h3>

<p>cat /etc/zabbix/zabbix_server.conf |grep IPMI</p>

<pre><code class="language-text">StartIPMIPollers=20

范围在0-1000选择，看你自己监控的ipmi主机的多少
</code></pre>

<h3 id="toc_3">导入监控模板</h3>

<pre><code class="language-text">模板下载地址: https://share.zabbix.com/index.php?option=com_mtree&amp;task=att_download&amp;link_id=642&amp;cf_id=39
</code></pre>

<p>添加监控主机，关联上本模板，并在IPMI页面</p>

<pre><code class="language-text">设置Authentication algorithm为Default, Privilege level为User, Username为root, Password为CNvWCYX98Yf^?Bd，保存即可
</code></pre>

<p><img src="http://p97r6m0sf.bkt.clouddn.com/15287912031450.jpg" alt=""/></p>

<p>cannot connect to IPMI host: [16777411] Unknown error 16777411<br/>
<img src="http://p97r6m0sf.bkt.clouddn.com/15287953505554.jpg" alt=""/></p>

<h2 id="toc_4">Agent端</h2>

<h3 id="toc_5">安装IPMItool软件包并开启IPMI服务</h3>

<pre><code class="language-text">yum install -y OpenIPMI ipmitool
service ipmi start
</code></pre>

<h3 id="toc_6">配置IPMI地址:</h3>

<pre><code class="language-text">ipmitool lan set 1 ipaddr 10.100.4.114
ipmitool lan set 1 netmask 255.255.255.0
ipmitool lan set 1 defgw ipaddr 10.100.4.1
ipmitool lan print 1
</code></pre>

<p>将本机的IPMI地址配置为10.100.4.114/24,网关为10.100.4.1</p>

<h3 id="toc_7">开启IPMI Over LAN</h3>

<pre><code class="language-text">ipmitool lan set 1 access on
</code></pre>

<h3 id="toc_8">配置用户</h3>

<p>本次的需求为监控服务器传感器信息，只需要USER级别用户即可.</p>

<pre><code class="language-text">ipmitool user set name 2 root 
ipmitool user set password 2 CNvWCYX98Yf^?Bd
ipmitool channel setaccess 1 2 callin=on ipi=on link=on privilege=4 

ipmitool user set name 15 bdyg_ipmi
ipmitool user set password 15 MrGVC8V[m8ci#Mi
ipmitool user enable 15
ipmitool user priv 15 2 1
ipmitool user list 1
</code></pre>

<p>将建立id为15，用户名为bdyg_ipmi，密码为MrGVC8V[m8ci#Mi,权限为User(对应2)</p>

<h3 id="toc_9">测试</h3>

<p>登录Zabbix服务器，通过ipmitool远程访问Dell服务器传感器信息</p>

<pre><code class="language-text">#查看用户信息
ipmitool -H 10.100.4.111 -I lanplus  -Uroot -PCNvWCYX98Yf^?Bd user list                         
#查看传感器信息
pmitool -H 10.100.4.111 -I lanplus  -Uroot -PCNvWCYX98Yf^?Bd sensor list
ipmitool -H 10.100.4.111 -I lanplus  -Uroot -PCNvWCYX98Yf^?Bd sensor get &quot;Inlet Temp&quot; 

#查看机器电源状态
ipmitool -H 10.100.4.111 -I lanplus  -Uroot -PCNvWCYX98Yf^?Bd chassis power status 

#查看机器硬件信息
ipmitool -H 10.100.4.111 -I lanplus  -Uroot -PCNvWCYX98Yf^?Bd fru
</code></pre>

<p>参考：<br/>
<a href="http://pengyao.org/zabbix-monitor-ipmi-1.html">http://pengyao.org/zabbix-monitor-ipmi-1.html</a><br/>
<a href="https://my.oschina.net/davehe/blog/88801">https://my.oschina.net/davehe/blog/88801</a><br/>
<a href="http://blog.51cto.com/tanght/1116586">http://blog.51cto.com/tanght/1116586</a><br/>
<a href="http://www.cnblogs.com/zhangxinglong/p/7424810.html">http://www.cnblogs.com/zhangxinglong/p/7424810.html</a><br/>
<a href="https://blog.csdn.net/satsuma_samurai/article/details/74940145">https://blog.csdn.net/satsuma_samurai/article/details/74940145</a><br/>
<a href="https://zhiliao.h3c.com/theme/details/20216">https://zhiliao.h3c.com/theme/details/20216</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VM WARE esxi]]></title>
    <link href="www.anhaoker.com/15286986347471.html"/>
    <updated>2018-06-11T14:30:34+08:00</updated>
    <id>www.anhaoker.com/15286986347471.html</id>
    <content type="html"><![CDATA[
<p>先了解下官方给的模板<br/>
<img src="http://p97r6m0sf.bkt.clouddn.com/15287047191127.jpg" alt=""/></p>

<p>zabbix 编译要支持–with-libxml2 和 –with-libcurl(前者用来解析调用SOAP接口返回的XML，后者用来调用vcenter的SOAP接口),</p>

<h2 id="toc_0">servers 配置文件</h2>

<p>vim /etc/zabbix/zabbix_server.conf</p>

<pre><code class="language-text">#VM ware ESXI
StartVMwareCollectors=4
VMwarePerfFrequency=60
VMwareCacheSize=200M

StartVMwareCollectors（0-250） 只有大于0时才能是该功能生效，意为预先配置的vmware监控实例数量。
VMwareCacheSize（256K-2G）内存中维护的vmware集群结构的大小，建议80M。
VMwareFrequency（10-864000）zabbix获取更新vmware集群结构的最小间隔时间，单位为分钟。

</code></pre>

<h2 id="toc_1">ZABBIX UI配置</h2>

<pre><code class="language-text">建议远程登录vcenter创建一个只读用户进行数据的读取

{$URL} - 输入vCenter SDK URL (https://vcenter ip/sdk)
{$USERNAME} - 登录vCenter使用的用户名，一般是administrator@vsphere.local
{$PASSWORD} - 登录vCenter使用的密码
</code></pre>

<p><img src="http://p97r6m0sf.bkt.clouddn.com/15287037867343.jpg" alt=""/><br/>
<img src="http://p97r6m0sf.bkt.clouddn.com/15287038113714.jpg" alt=""/><br/>
<img src="http://p97r6m0sf.bkt.clouddn.com/15287038987381.jpg" alt=""/></p>

<p>参考：<br/>
<a href="https://www.zabbix.com/documentation/3.4/zh/manual/vm_monitoring">https://www.zabbix.com/documentation/3.4/zh/manual/vm_monitoring</a></p>

<p><a href="https://github.com/ameiji/Zabbix-VMware-Templates/blob/master/COPYING">https://github.com/ameiji/Zabbix-VMware-Templates/blob/master/COPYING</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IO监控]]></title>
    <link href="www.anhaoker.com/15284429017864.html"/>
    <updated>2018-06-08T15:28:21+08:00</updated>
    <id>www.anhaoker.com/15284429017864.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">1、磁盘状态：cat /proc/diskstats</h2>

<h3 id="toc_1">server ui 配置</h3>

<h4 id="toc_2">导入模板</h4>

<p><img src="http://p97r6m0sf.bkt.clouddn.com/15284431940772.jpg" alt=""/></p>

<h4 id="toc_3">添加自动发现规则(如果没有则创建)</h4>

<p><img src="http://p97r6m0sf.bkt.clouddn.com/15284438467669.jpg" alt=""/></p>

<h3 id="toc_4">agent 配置</h3>

<h4 id="toc_5">配置文件</h4>

<p>vim /etc/zabbix/zabbix_agentd.conf.d/userparameter_iostat.conf</p>

<pre><code class="language-text">UserParameter=custom.vfs.dev.discovery,/etc/zabbix/zabbix_scripts/dev-discovery.sh
UserParameter=iostat[*],/etc/zabbix/zabbix_scripts/iostat-chk.sh $1 $2
UserParameter=disk.status[*],/bin/bash /etc/zabbix/zabbix_scripts/check_disk.sh -d $1 -o $2
</code></pre>

<h4 id="toc_6">脚本</h4>

<p>cat /etc/zabbix/zabbix_scripts/dev-discovery.sh</p>

<pre><code class="language-text">#!/bin/bash

DEVICES=`iostat | awk &#39;{ if ($1 ~ &quot;^([shxv]|xv)d[a-z]$&quot;) { print $1 } }&#39;`

COUNT=`echo &quot;$DEVICES&quot; | wc -l`
INDEX=0
echo &#39;{&quot;data&quot;:[&#39;
echo &quot;$DEVICES&quot; | while read LINE; do
    echo -n &#39;{&quot;{#DEVNAME}&quot;:&quot;&#39;$LINE&#39;&quot;}&#39;
    INDEX=`expr $INDEX + 1`
    if [ $INDEX -lt $COUNT ]; then
        echo &#39;,&#39;
    fi
done
echo &#39;]}&#39;
</code></pre>

<p>或</p>

<pre><code class="language-text">#!/bin/bash

diskarray=(`cat /proc/diskstats |grep -E &quot;\bsd[abcdefg]\b|\bxvd[abcdefg]\b&quot;|grep -i &quot;\b$1\b&quot;|awk &#39;{print $3}&#39;|sort|uniq   2&gt;/dev/null`)
length=${#diskarray[@]}

printf &quot;{\n&quot;printf  &#39;\t&#39;&quot;\&quot;data\&quot;:[&quot;

for ((i=0;i&lt;$length;i++))

do
        printf &#39;\n\t\t{&#39;
        printf &quot;\&quot;{#DISK_NAME}\&quot;:\&quot;${diskarray[$i]}\&quot;}&quot;
        if [ $i -lt $[$length-1] ];then
                printf &#39;,&#39;
        fi
done
printf  &quot;\n\t]\n&quot;printf &quot;}\n&quot;
</code></pre>

<p>cat /etc/zabbix/zabbix_scripts/check_disk.sh </p>

<pre><code class="language-text">#!/bin/sh 
# 80 sda 76880282531 8117316 937263519846 4237854729 62989000438 35668103347 777694636224 1190396494 3 2895102137 899093508 
while getopts &quot;d:o:&quot; opt 
do 
case $opt in 
d ) disk=$OPTARG;; 
o ) option=$OPTARG;; 
? ) 
echo &#39;parameter is wrong!&#39; 
exit 1;; 
esac 
done 
if [ ! &quot;${disk}&quot; ] || [ ! &quot;${option}&quot; ];then 
echo &quot;parameter is null&quot; 
exit 1 
fi 
if [[ ${option} == &quot;read&quot; ]];then 
cat /proc/diskstats |grep &quot;${disk} &quot;|awk &#39;{print $6}&#39; 
elif [[ ${option} == &quot;write&quot; ]];then 
cat /proc/diskstats |grep &quot;${disk} &quot;|awk &#39;{print $10}&#39; 
elif [[ ${option} == &quot;readops&quot; ]];then 
cat /proc/diskstats |grep &quot;${disk} &quot;|awk &#39;{print $4}&#39; 
elif [[ ${option} == &quot;writeops&quot; ]];then 
cat /proc/diskstats |grep &quot;${disk} &quot;|awk &#39;{print $8}&#39; 
elif [[ ${option} == &quot;readtime&quot; ]];then 
cat /proc/diskstats |grep &quot;${disk} &quot;|awk &#39;{print $7}&#39; 
elif [[ ${option} == &quot;writetime&quot; ]];then 
cat /proc/diskstats |grep &quot;${disk} &quot;|awk &#39;{print $11}&#39; 
fi 
</code></pre>

<p>/etc/init.d/zabbix_agentd restart</p>

<p>cat /proc/diskstats </p>

<pre><code class="language-text">设备号     编号  设备      读完成次数   合并完成次数      读扇区次数       读操作花费毫秒数    写完成次数       合并写完成次数     写扇区次数       写操作花费的毫秒数       正在处理的输入/输出请求数       输入/输出操作花费的毫秒数       输入/输出操作花费的加权毫秒数。
   8       0    sda       437179787      111140         88148407612     256090773           504526543       4574433         57747952507     870869581                   0                           215482123                           1126127633

从diskstats采集，磁盘使用率计算方式为：
两次采集的输入/输出操作花费的毫秒数之差 / 采集间隔时间

例如：第一次采集输入/输出操作花费的毫秒数为90258834，间隔10秒后采集的值为90258710
那么磁盘使用率为 （90258710ms - 90258834ms）/ 10*1000ms = 0.0124，也就是1.24%
</code></pre>

<p>参考：<br/>
<a href="https://www.aliyun.com/jiaocheng/433252.html">https://www.aliyun.com/jiaocheng/433252.html</a><br/>
<a href="https://www.cnblogs.com/zhangs1986/p/8118788.html">https://www.cnblogs.com/zhangs1986/p/8118788.html</a><br/>
<a href="https://www.cnblogs.com/dachenzi/p/8232001.html">https://www.cnblogs.com/dachenzi/p/8232001.html</a></p>

<h2 id="toc_7">2. IOSTAT状态</h2>

<h3 id="toc_8">server ui 配置</h3>

<h4 id="toc_9">导入模板</h4>

<p><a href="media/15284429017864/zbx_export_templates%20-1-.xml">zbx_export_templates -1-</a></p>

<h4 id="toc_10">添加自动发现规则(如果没有则创建)</h4>

<h3 id="toc_11">agent 配置</h3>

<h4 id="toc_12">配置文件</h4>

<h4 id="toc_13">脚本</h4>

<p>自动发现脚本：<br/>
cat /etc/zabbix/zabbix_scripts/dev-discovery.sh</p>

<pre><code class="language-text">#!/bin/bash

DEVICES=`iostat | awk &#39;{ if ($1 ~ &quot;^([shxv]|xv)d[a-z]$&quot;) { print $1 } }&#39;`

COUNT=`echo &quot;$DEVICES&quot; | wc -l`
INDEX=0
echo &#39;{&quot;data&quot;:[&#39;
echo &quot;$DEVICES&quot; | while read LINE; do
    echo -n &#39;{&quot;{#DEVNAME}&quot;:&quot;&#39;$LINE&#39;&quot;}&#39;
    INDEX=`expr $INDEX + 1`
    if [ $INDEX -lt $COUNT ]; then
        echo &#39;,&#39;
    fi
done
echo &#39;]}&#39;
</code></pre>

<p>数据采集脚本<br/>
cat /etc/zabbix/zabbix_scripts/disk_status.sh</p>

<pre><code class="language-text">#/bin/sh
device=$1
item=$2

/usr/bin/iostat -dxkt 2 2 &gt; /var/log/zabbix/iostat_output 2&gt;/dev/null

case $item in

rrqm)
/usr/bin/tail -n20 /tmp/iostat_output |grep &quot;\b$device\b&quot;|tail -1|awk &#39;{print $2}&#39;
;;

wrqm)
/usr/bin/tail -n20 /tmp/iostat_output |grep &quot;\b$device\b&quot;|tail -1|awk &#39;{print $3}&#39;
;;

rps)
/usr/bin/tail -n20 /tmp/iostat_output |grep &quot;\b$device\b&quot;|tail -1|awk &#39;{print $4}&#39;
;;

wps)
/usr/bin/tail -n20 /tmp/iostat_output |grep &quot;\b$device\b&quot; |tail -1|awk &#39;{print $5}&#39;
;;

rKBps)
/usr/bin/tail -n20 /tmp/iostat_output |grep &quot;\b$device\b&quot; |tail -1|awk &#39;{print $6}&#39;
;;

wKBps)
/usr/bin/tail -n20 /tmp/iostat_output |grep &quot;\b$device\b&quot; |tail -1|awk &#39;{print $7}&#39;
;;

avgrq-sz)
/usr/bin/tail -n20 /tmp/iostat_output |grep &quot;\b$device\b&quot; |tail -1|awk &#39;{print $8}&#39;
;;

avgqu-sz)
/usr/bin/tail -n20 /tmp/iostat_output |grep &quot;\b$device\b&quot; |tail -1|awk &#39;{print $9}&#39;
;;

await)
/usr/bin/tail -n20 /tmp/iostat_output |grep &quot;\b$device\b&quot; |tail -1|awk &#39;{print $10}&#39;
;;

r_await)
/usr/bin/tail -n20 /tmp/iostat_output |grep &quot;\b$device\b&quot; |tail -1|awk &#39;{print $11}&#39;
;;

w_await)
/usr/bin/tail -n20 /tmp/iostat_output |grep &quot;\b$device\b&quot; |tail -1|awk &#39;{print $12}&#39;
;;

svctm)
/usr/bin/tail -n20 /tmp/iostat_output |grep &quot;\b$device\b&quot; |tail -1|awk &#39;{print $13}&#39;
;;

util)
/usr/bin/tail -n20 /tmp/iostat_output |grep &quot;\b$device\b&quot; |tail -1|awk &#39;{print $14}&#39;
;;
esac
</code></pre>

<p>/etc/init.d/zabbix_agentd restart</p>

<p>参考：</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zabbix3.2/3.4 部署安装]]></title>
    <link href="www.anhaoker.com/15246196912882.html"/>
    <updated>2018-04-25T09:28:11+08:00</updated>
    <id>www.anhaoker.com/15246196912882.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0"></a>
<ul>
<li>
<a href="#toc_1">部署流程</a>
<ul>
<li>
<a href="#toc_2">1.  选择Zabbix版本</a>
</li>
<li>
<a href="#toc_3">2. 安装系统环境</a>
</li>
<li>
<a href="#toc_4">3. 安装和配置Zabbix服务器</a>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0"></h2>

<p>zabbix官网：<a href="http://www.zabbix.com">http://www.zabbix.com</a><br/>
zabbix下载地址：<a href="http://www.zabbix.com/download">http://www.zabbix.com/download</a><br/>
zabbix下载地址：<a href="https://repo.zabbix.com/zabbix/3.2/rhel/7/x86_64/">https://repo.zabbix.com/zabbix/3.2/rhel/7/x86_64/</a><br/>
zabbix监控模板：<a href="https://share.zabbix.com/search-by/tags?value=netkiller">https://share.zabbix.com/search-by/tags?value=netkiller</a></p>

<h3 id="toc_1">部署流程</h3>

<h4 id="toc_2">1.  选择Zabbix版本</h4>

<p><a href="https://www.zabbix.com/life_cycle_and_release_policy">https://www.zabbix.com/life_cycle_and_release_policy</a></p>

<h4 id="toc_3">2. 安装系统环境</h4>

<pre><code class="language-text">yum install -y unixODBC unixODBC-devel net-snmp net-snmp-devel java-devel libssh2-devel OpenIPMI ipmitool OpenIPMI-devel fping php-devel libevent-devel mysql-devel
</code></pre>

<p>安装php及组件</p>

<pre><code class="language-text">cd /data/source/
./sm
18,19
</code></pre>

<p>PHP安装bcmach</p>

<pre><code class="language-text">ln -s /usr/local/php-5.4.26 /usr/local/php
cd /data/source/
tar zxf php-5.4.26.tar.gz
cd /data/source/php-5.4.26/ext/bcmath
phpize
./configure --with-php-config=/usr/local/php/bin/php-config
make &amp;&amp; make install
cd /data/source/php-5.4.26/ext/gettext/
phpize
./configure --with-php-config=/usr/local/php/bin/php-config
make &amp;&amp; make install

cd /data/install/php-5.4.26/ext/ldap
phpize
cp -frp /usr/lib64/libldap* /usr/lib/
./configure --with-php-config=/usr/local/php/bin/php-config --with-ldap
make &amp;&amp; make install


vi /home/server_config/php/php.ini.5.4
在910行处添加：
extension=bcmath.so
extension=gettext.so
extension=ldap.so
</code></pre>

<p>优化php.ini</p>

<pre><code class="language-text">cp /home/server_config/php/php.ini.5.4 /home/server_config/php/php.ini.5.4.default
sed -i &quot;s/;date.timezone =/date.timezone = Asia\/Shanghai/g&quot; /home/server_config/php/php.ini.5.4
sed -i &quot;s#max_execution_time = 30#max_execution_time = 300#g&quot; /home/server_config/php/php.ini.5.4
sed -i &quot;s#post_max_size = 8M#post_max_size = 32M#g&quot; /home/server_config/php/php.ini.5.4
sed -i &quot;s#max_input_time = 60#max_input_time = 300#g&quot; /home/server_config/php/php.ini.5.4
sed -i &quot;s#memory_limit = 128M#memory_limit = 128M#g&quot; /home/server_config/php/php.ini.5.4
#sed -i &quot;/;mbstring.func_overload = 0/ambstring.func_overload = 2\n&quot; /home/server_config/php/php.ini.5.4
mkdir /etc/php-fpm
ln -s /home/server_config/php-fpm/php-fpm.conf.5.4.26 /etc/php-fpm/php-fpm.conf
ln -s /home/server_config/php-fpm/php-fpm /etc/init.d/php-fpm
/etc/init.d/php-fpm restart
</code></pre>

<h4 id="toc_4">3. 安装和配置Zabbix服务器</h4>

<pre><code class="language-text">下载地址：
wget https://jaist.dl.sourceforge.net/project/zabbix/ZABBIX%20Latest%20Stable/3.4.12/zabbix-3.4.12.tar.gz

groupadd -g 201 zabbix
useradd -u 201 -g zabbix -d /var/lib/zabbix -s /sbin/nologin -c &quot;Zabbix System User&quot; zabbix
cd /usr/local/src
wget https://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Stable/3.4.12/zabbix-3.4.12.tar.gz
tar zxf zabbix-3.4.12.tar.gz
cd zabbix-3.4.12
./configure --prefix=/usr/local/zabbix-3.4.12 --sysconfdir=/etc/zabbix --enable-server --enable-proxy --enable-agent --enable-ipv6 --with-mysql=/usr/bin/mysql_config --with-net-snmp  --with-libxml2 --with-libcurl --with-openipmi --with-openssl --with-unixodbc --with-ldap --with-ssh2 --enable-java
make &amp;&amp; make install
ln -s /usr/local/zabbix-3.4.12 /usr/local/zabbix
mkdir /var/log/zabbix
chown -R zabbix.zabbix /var/log/zabbix
</code></pre>

<p>创建zabbix数据库和用户</p>

<pre><code class="language-text">create database zabbix character set utf8;
grant all privileges on zabbix.* to zabbix@localhost identified by &#39;Zabbix@2018&#39;;
grant all privileges on zabbix.* to zabbix@&#39;10.100.10.12&#39; identified by &#39;Zabbix@2018&#39;;
</code></pre>

<p>导入zabbix数据库</p>

<pre><code class="language-text">use zabbix;
source /usr/local/src/zabbix-3.4.12/database/mysql/schema.sql;
source /usr/local/src/zabbix-3.4.12/database/mysql/images.sql;
source /usr/local/src/zabbix-3.4.12/database/mysql/data.sql;

将原数据库导入即可

</code></pre>

<p>修改配置</p>

<pre><code class="language-text">cp /etc/zabbix/zabbix_server.conf /etc/zabbix/zabbix_server.conf.default
配置server.conf
vi /etc/zabbix/zabbix_server.conf
LogFile=/var/log/zabbix/zabbix_server.log
DBHost=localhost
DBName=zabbix
DBUser=zabbix
DBPassword=Zabbix@2018
DBSocket=/tmp/mysql3306.sock
DBPort=3306
StartPollers=160
StartTrappers=20
StartPingers=100
StartDiscoverers=120
MaxHousekeeperDelete=5000
CacheSize=1024M
StartDBSyncers=16
HistoryCacheSize=1024M
TrendCacheSize=1024M
AlertScriptsPath=/etc/zabbix/alertscripts
FpingLocation=/usr/sbin/fping
LogSlowQueries=1000

cp /etc/zabbix/zabbix_agentd.conf /etc/zabbix/zabbix_agentd.conf.default
配置agentd.conf
vi /etc/zabbix/zabbix_agentd.conf
LogFile=/var/log/zabbix/zabbix_agentd.log
EnableRemoteCommands=0
Server=127.0.0.1,10.100.10.12
StartAgents=8
ServerActive=10.100.10.12:10051
Hostname=zabbix.jw.com
Timeout=30
Include=/etc/zabbix/zabbix_agentd.conf.d/
UnsafeUserParameters=1

迁移时将/etc/zabbix目录覆盖即可
</code></pre>

<p>增加系统&amp;开机配置</p>

<pre><code class="language-text">cp /usr/local/src/zabbix-3.4.12/misc/init.d/fedora/core/zabbix_* /etc/init.d/
chmod 755 /etc/init.d/zabbix_*
sed -i &quot;s#BASEDIR=/usr/local#BASEDIR=/usr/local/zabbix/#g&quot; /etc/init.d/zabbix_server
sed -i &quot;s#BASEDIR=/usr/local#BASEDIR=/usr/local/zabbix/#g&quot; /etc/init.d/zabbix_agentd
chkconfig --add zabbix_agentd
chkconfig --add zabbix_server
chkconfig zabbix_agentd on
chkconfig zabbix_server on

启动zabbix
/etc/init.d/zabbix_server start
/etc/init.d/zabbix_agentd start
</code></pre>

<p>配置nginx WEB访问</p>

<pre><code class="language-text">mkdir -p /data/www
cd /usr/local/src/zabbix-3.4.12
cp -r ./frontends/php/ /data/www/zabbix
chown -R nobody.nobody /data/www/zabbix/

**配置nginx**
cd /usr/local/nginx/conf/vhosts
cp test.conf.example zabbix.jw.com.conf
vi zabbix.jw.com.conf

server {
    listen 80;
    server_name zabbix.jue-wu.com;
    index index.php index.html index.htm;
    root /data/www/zabbix;
    location ~ /.svn/ {
    deny all;
    }
    location ~ ^.*\.(htaccess|zip|gz|tgz)$ {
    deny all;
    }
    location ~* ^/(attachments|images|upload)/.*\.(php|php5)$ {
    deny all;
    }
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ {
    expires 7d;
    }
    location ~ .*\.(js|css)?$ {
    expires 24h;
    }
    location ~ .*\.php?$ {
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        #fastcgi_param HTTPS on;
        include fastcgi_params;
    }
}

迁移：将vhosts目录下所有配置拷贝过来即可

</code></pre>

<p>开启防火墙</p>

<pre><code class="language-text">${IPTABLES} -A INPUT -p tcp --dport 10050 -j ACCEPT
${IPTABLES} -A INPUT -p tcp --dport 10051 -j ACCEPT
迁移时，拷贝原服务器/home/server_config/iptables_rules/配置
</code></pre>

<p>配置zabbix web页面<br/>
忽略</p>

<p>解决zabbix中文乱码</p>

<pre><code class="language-text">cd /usr/local/src
wget http://bjqw-dl.bjtuling.com:8180/zabbix/simkai.ttf
cp simkai.ttf /data/www/zabbix/fonts/
sed -i &#39;s/DejaVuSans/simkai/g&#39; /data/www/zabbix/include/defines.inc.php
</code></pre>

<p>部署Client端</p>

<pre><code class="language-text">1. 下载&amp;安装


groupadd -g 201 zabbix
useradd -u 201 -g zabbix -d /var/lib/zabbix -s /sbin/nologin -c &quot;Zabbix System User&quot; zabbix

cd /usr/local/src
wget http://netix.dl.sourceforge.net/project/zabbix/ZABBIX%20Latest%20Stable/3.0.4/zabbix-3.4.12.tar.gz
tar zxf zabbix-3.4.12.tar.gz
cd zabbix-3.4.12
./configure --prefix=/usr/local/zabbix-3.4.12 --sysconfdir=/etc/zabbix --enable-agent
make &amp;&amp; make install
ln -s /usr/local/zabbix-3.4.12 /usr/local/zabbix
mkdir /var/log/zabbix
chown -R zabbix.zabbix /var/log/zabbix
cp /etc/zabbix/zabbix_agentd.conf /etc/zabbix/zabbix_agentd.conf.default
cp misc/init.d/fedora/core/zabbix_agentd /etc/init.d/
sed -i &quot;s#BASEDIR=/usr/local#BASEDIR=/usr/local/zabbix/#g&quot; /etc/init.d/zabbix_agentd
chmod 755 /etc/init.d/zabbix_agentd


2. 修改配置文件
vi /etc/zabbix/zabbix_agentd.conf

LogFile=/var/log/zabbix/zabbix_agentd.log
EnableRemoteCommands=0
#被动模式一定要记得设置Server ＝ ServerIP
Server=10.100.10.12
StartAgents=4
#主动模式一定要记得设置ServerActive=ServerIP
ServerActive=10.100.10.12:10051
Hostname=kvm.lykonggu.com
Timeout=30
Include=/etc/zabbix/zabbix_agentd.conf.d/
UnsafeUserParameters=1
HostMetadataItem=system.uname


3. 增加开机启动
chkconfig --add zabbix_agentd
chkconfig zabbix_agentd on
/etc/init.d/zabbix_agentd start
</code></pre>

<p>自动化安装脚本</p>

<pre><code class="language-text">1. zabbix客户端安装脚本
cd /usr/local/src ;wget http://bjqw-dl.bjtuling.com:8180/zabbix/init_scripts/init_zabbix_agent_3.2.6.sh ; sh init_zabbix_agent_3.2.6.sh
zabbix客户端相关脚本




1. 监控nginx
zabbix server 导入nginx模板
zabbix agent 配置
mkdir /etc/zabbix/scripts/ ;
wget -O /etc/zabbix/scripts/ngx_status.sh http://bjqw-dl.bjtuling.com:8180/zabbix/zabbix_scripts/ngx_status.sh;
wget -O /etc/zabbix/zabbix_agentd.conf.d/userparameter_nginx.conf http://bjqw-dl.bjtuling.com:8180/zabbix/zabbix_agentd.conf.d/userparameter_nginx.conf;
chown -R zabbix.zabbix /etc/zabbix/;
chmod 755 /etc/zabbix/scripts/ngx_status.sh;
/etc/init.d/zabbix_agentd restart
一句话安装脚本
cd /usr/loca/src;wget http://bjqw-dl.bjtuling.com:8180/zabbix/init_scripts/init_zabbix_ngx_status.sh;sh init_zabbix_ngx_status.sh
2. 监控mysql多实例
zabbix server 导入mysql监控模板
zabbix agent 配置
yum install -y php php-mysql;
chmod +s /bin/netstat;
mkdir /etc/zabbix/scripts;
cd /etc/zabbix/scripts;
wget http://bjqw-dl.bjtuling.com:8180/zabbix/zabbix_scripts/get_mysql_stats_wrapper.sh;
wget http://bjqw-dl.bjtuling.com:8180/zabbix/zabbix_scripts/mysql_low_discovery.sh;
wget http://bjqw-dl.bjtuling.com:8180/zabbix/zabbix_scripts/ss_get_mysql_stats.php;
cd /etc/zabbix/zabbix_agentd.conf.d;
wget http://bjqw-dl.bjtuling.com:8180/zabbix/zabbix_agentd.conf.d/userparameter_percona_mysql.conf;
chown -R zabbix.zabbix /etc/zabbix/;
chmod 755 /etc/zabbix/scripts/*;
/etc/init.d/zabbix_agentd restart
一句话安装脚本
cd /usr/local/src;wget http://bjqw-dl.bjtuling.com:8180/zabbix/init_scripts/init_zabbix_mysql_multi_status.sh;sh init_zabbix_mysql_multi_status.sh
3. 监控tomcat多实例
zabbix server 导入tomcat监控模板
zabbix agent 配置
mkdir /etc/zabbix/scripts;
cd /etc/zabbix/scripts;
wget http://bjqw-dl.bjtuling.com:8180/zabbix/zabbix_scripts/jmx_discovery.sh;
cd /etc/zabbix/zabbix_agentd.conf.d;
wget http://bjqw-dl.bjtuling.com:8180/zabbix/zabbix_scripts/userparameter_tomcat.conf;
chown -R zabbix.zabbix /etc/zabbix/;
chmod 755 /etc/zabbix/scripts/*;
/etc/init.d/zabbix_agentd restart
一句话安装脚本
cd /usr/local/src;wget http://bjqw-dl.bjtuling.com:8180/zabbix/init_scripts/init_zabbix_tomcat_multi_status.sh;sh init_zabbix_tomcat_multi_status.sh
4. 监控redis多实例
在zabbix后台，导入模板
下载脚本，并重启zabbix_agentd
chmod +s /bin/netstat;
mkdir /etc/zabbix/scripts;
cd /etc/zabbix/scripts;
wget http://bjqw-dl.bjtuling.com:8180/zabbix/zabbix_scripts/redis_stats.sh;
wget http://bjqw-dl.bjtuling.com:8180/zabbix/zabbix_scripts/redis_discovery.py;
cd /etc/zabbix/zabbix_agentd.conf.d;
wget http://bjqw-dl.bjtuling.com:8180/zabbix/zabbix_scripts/redis_status.conf;
chown -R zabbix.zabbix /etc/zabbix/;
chmod 755 /etc/zabbix/scripts/*;
/etc/init.d/zabbix_agentd restart
一句话安装脚本
cd /usr/local/src;wget http://bjqw-dl.bjtuling.com:8180/zabbix/init_scripts/init_zabbix_redis_status.sh;sh init_zabbix_redis_status.sh
5. 监控mongodb
在zabbix后台，导入模板
下载脚本，并重启zabbix_agentd
chmod +s /bin/netstat;
mkdir /etc/zabbix/scripts;
cd /etc/zabbix/zabbix_agentd.conf.d;
wget http://bjqw-dl.bjtuling.com:8180/zabbix/zabbix_scripts/userparameter_mongodb.conf;
chown -R zabbix.zabbix /etc/zabbix/;
/etc/init.d/zabbix_agentd restart
一句话安装脚本
cd /usr/local/src;wget http://bjqw-dl.bjtuling.com:8180/zabbix/init_scripts/init_zabbix_mongodb_status.sh;sh init_zabbix_mongodb_status.sh
6. 监控io
cd /usr/local/src;wget http://bjqw-dl.bjtuling.com:8180/zabbix/init_scripts/init_zabbix_iostat_status.sh;sh init_zabbix_iostat_status.sh

</code></pre>

<p>监控JVM相关</p>

<pre><code class="language-text">yum install -y java-devel zabbix-java-gateway
systemctl start zabbix-java-gateway.service
systemctl enable zabbix-java-gateway.service

vim /etc/zabbix/zabbix_java_gateway.conf
LISTEN_IP=&quot;0.0.0.0&quot;
LISTEN_PORT=10052
PID_FILE=&quot;/var/run/zabbix/zabbix_java.pid&quot;
START_POLLERS=20

vim /etc/zabbix/zabbix_server.conf 
JavaGateway=192.168.89.204
JavaGatewayPort=10052
StartJavaPollers=20
</code></pre>

<p>zabbix故障排查</p>

<ol>
<li>Too many processes on Zabbix server</li>
</ol>

<pre><code class="language-text">配置-模板-Template_Linux
Configuration--&gt;Templates找到Template_Linux点该行的 Triggers选择：Too many processes on {HOSTNAME}，表达式修改为：
{Template OS Linux:proc.num[].avg(5m)}&gt;500
2. &quot;cannot send list of active checks to []: host [] not found&quot;
解决办法:
因为web端上被监控端的主机名和zabbix_agentd.conf中的Hostname名字不一样,改为一样的即可
参考文档
中小企业监控体系构建实战：微信 赵舜东 高效运维
使用zabbix监控TCP连接状态：http://blog.csdn.net/u013636377/article/details/51611670
- zabbix模板：https://share.zabbix.com/search-by/tags?value=netkiller
</code></pre>

<ol>
<li>org.json.JSONException: No value for jmx_endpoint</li>
</ol>

<pre><code class="language-text">清理zabbix其他YUM源（特别是高版本）
rpm -i http://repo.zabbix.com/zabbix/3.2/rhel/7/x86_64/zabbix-release-3.2-1.el7.noarch.rpm
yum clean all
yum install  zabbix-java-gateway
systemctl restart zabbix-java-gateway.service 
tail -fn200 /var/log/zabbix/zabbix_java_gateway.log
</code></pre>

<ol>
<li>Error connecting to database: Connection refused</li>
</ol>

<pre><code class="language-text">排查过程：
1.检查zabbix_server.conf配置文件，发现数据库配置也是正确的，但就是报上面的错误
2.最后通过网上搜索，发现
******/zabbix/conf/zabbix.conf.php
文件里面也有数据库的配置不正确
</code></pre>

<ol>
<li>初始admin 密码</li>
</ol>

<pre><code class="language-text">use zabbix; 
select * from users;
select userid,passwd from users;

#生成一个MD5加密的密码，这里密码设置的是zabbix
select md5(&#39;zabbix&#39;);
update users set passwd=&#39;5fce1b3e34b520afeffb37ce08c7cd66&#39; where userid = &#39;1&#39;;
       #或者直接使用update  users set passwd=md5(&quot;redhat&quot;) where userid=&#39;1&#39;;
flush privileges;
</code></pre>

<ol>
<li>LDAP</li>
</ol>

<p>zabbix不会把ldap的用户同步过了，你要登录，得先在zabbix上创建和ldap内同名的用户才行<br/>
<img src="media/15246196912882/15284255403350.jpg" alt=""/></p>

<pre><code class="language-text">LDAP host：访问DC的地址。格式：ldap://ip地址
Port：默认389
Base DN: dc=tencent,dc=com,也就是域名(tencent.com)
Search attribute: uid，属性值，网上有填sAMAccountName。

Bind DN： cn=Admin, ou=People, dc=tencent, dc=com。 cn就是在DC中创建的LDAPuser用户， ou就是LDAPuser属于哪个ou，dc=tencent和dc=com不在解释。

Bind password：xxxx ，改密码为LDAPuser用户的密码
Login：Admin
User password：在DC中创建Admin用户的密码

</code></pre>

<p>参考：<a href="https://www.jianshu.com/p/2326f1ec2c2b">https://www.jianshu.com/p/2326f1ec2c2b</a></p>

<p>自动注册-【动作】菜单里，输入：</p>

<pre><code class="language-text">名称：Action_for_自动注册
默认接收人：Auto registration: {HOST.HOST}
默认信息：
Host name: {HOST.HOST}
Host IP: {HOST.IP}
Agent port: {HOST.PORT}
</code></pre>

<p>在【条件】菜单里，输入：</p>

<pre><code class="language-text">标签：A
名称：主机元数据  似 Linux
</code></pre>

<p>在【操作】菜单里，输入：</p>

<pre><code class="language-text">操作类型：添加主机
添加到主机群组: Linux servers
链接到模板: Template App Zabbix Agent, Template ICMP Ping, Template OS Linux
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基础知识练习]]></title>
    <link href="www.anhaoker.com/15221590998154.html"/>
    <updated>2018-03-27T21:58:19+08:00</updated>
    <id>www.anhaoker.com/15221590998154.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">1、执行 Python 脚本的两种方式</a>
</li>
<li>
<a href="#toc_1">2、简述位、字节的关系</a>
</li>
<li>
<a href="#toc_2">3、简述 ascii、unicode、utf-8、gbk 的关系</a>
</li>
<li>
<a href="#toc_3">4、请写出 “李杰” 分别用 utf-8 和 gbk 编码所占的位数</a>
</li>
<li>
<a href="#toc_4">5、Pyhton 单行注释和多行注释分别用什么?</a>
</li>
<li>
<a href="#toc_5">6、声明变量注意事项有那些?</a>
</li>
<li>
<a href="#toc_6">7、如有一下变量 n1 = 5，请使用 int 的提供的方法，得到该变量最少可以用多少个二进制位表示?</a>
</li>
<li>
<a href="#toc_7">8、布尔值分别有什么?</a>
</li>
<li>
<a href="#toc_8">9、阅读代码，请写出执行结果</a>
</li>
<li>
<a href="#toc_9">10、写代码，有如下变量，请按照要求实现每个功能 name = &quot; aleX&quot;</a>
</li>
<li>
<a href="#toc_10">21、字符串是否可迭代对象?如可以请使用 for 循环每一个元素?</a>
</li>
<li>
<a href="#toc_11">22、请用代码实现:</a>
</li>
<li>
<a href="#toc_12">23、Python2 中的 range 和 Python3 中的 range 的区别?</a>
</li>
<li>
<a href="#toc_13">24、实现一个整数加法计算器: 如:</a>
</li>
<li>
<a href="#toc_14">25、计算用户输入的内容中有几个十进制小数?几个字母? 如:</a>
</li>
<li>
<a href="#toc_15">26、简述 int 和 9 等数字 以及 str 和 &quot;xxoo&quot; 等字符串的关系?</a>
</li>
<li>
<a href="#toc_16">27、制作趣味模板程序 需求:等待用户输入名字、地点、爱好，根据用户的名字和爱好进行任意现实</a>
</li>
<li>
<a href="#toc_17">28、制作随机验证码，不区分大小写。 流程:</a>
</li>
<li>
<a href="#toc_18">29、开发敏感词语过滤程序，提示用户输入内容，如果用户输入的内容中包含特殊的字符: 如 &quot;苍老师&quot; &quot;东京热&quot;，则将内容替换为 ***</a>
</li>
<li>
<a href="#toc_19">30、制作表格</a>
</li>
</ul>


<h4 id="toc_0">1、执行 Python 脚本的两种方式</h4>

<p>1、REPL</p>

<pre><code class="language-text">所谓REPL即read、eva、print、loop（读取、计算、打印、循环）
</code></pre>

<p><img src="media/15221590998154/15221602097992.jpg" alt=""/></p>

<p>2、运行脚本</p>

<pre><code class="language-text">REPL方式的优点是简单明了，但是它在面对很多大型项目时存在很多的不足。我们可以通过运行脚本的方式来解决这一问题
</code></pre>

<p><img src="media/15221590998154/15221603038347.jpg" alt=""/></p>

<p><img src="media/15221590998154/15221605001379.jpg" alt=""/></p>

<h4 id="toc_1">2、简述位、字节的关系</h4>

<pre><code class="language-text">位（bit）：“比特”，表示二进制位。位是计算机内部数据储存的最小单位
字节（byte） ：“拜特”，习惯上用大写的“B”表示。字节是计算机中数据处理的基本单位。
1个字节等于8个比特：1Byte=8bit
</code></pre>

<h4 id="toc_2">3、简述 ascii、unicode、utf-8、gbk 的关系</h4>

<pre><code class="language-text">ascii 是最早美国用的标准信息交换码，把所有的字母的大小写，各种符号用 二进制来表示，共有256中，加入些拉丁文等字符，1bytes代表一个字符，

Unicode是为了统一世界各国语言的不用，统一用2个bytes代表一个字符，可以表达2**16=65556个，称为万国语言，特点：速度快，但浪费空间，可以用在内存处理中，兼容了utf-8，gbk，ASCII，

utf-8 为了改变Unicode的这种缺点，规定1个英文字符用1个字节表示，1个中文字符用3个字节表示，特点；节省空间，速度慢，用在硬盘数据传输，网络数据传输，相比硬盘和网络速度，体现不出来的，

gbk  是中文的字符编码，用2个字节代表一个字符，
</code></pre>

<h4 id="toc_3">4、请写出 “李杰” 分别用 utf-8 和 gbk 编码所占的位数</h4>

<p><img src="media/15221590998154/15221615148954.jpg" alt=""/><br/>
<img src="media/15221590998154/15221619116378.jpg" alt=""/></p>

<h4 id="toc_4">5、Pyhton 单行注释和多行注释分别用什么?</h4>

<pre><code class="language-text">单行注释符号(#)
井号(#)常被用作单行注释符号，在代码中使用#时，它右边的任何数据都会被忽略，当做是注释。

批量、多行注释符号（&#39;&#39;&#39; &#39;&#39;&#39;, &quot;&quot;&quot; &quot;&quot;&quot;）
在python中也会有注释有很多行的时候，这种情况下就需要批量多行注释符了。多行注释是用三引号(单，双)
</code></pre>

<h4 id="toc_5">6、声明变量注意事项有那些?</h4>

<pre><code class="language-text">1、变量名可以包括字母、数字、下划线，但是数字不能做为开头。例如：name1是合法变量名，而1name就不可以。
2、关键字（保留字）不能做变量名使用，函数不允许做变量名。
3、除了下划线之外，其它符号不能做为变量名使用
4、Python的变量名是除分大小写的，例如：name和Name就是两个变量名，而非相同变量哦。
</code></pre>

<h4 id="toc_6">7、如有一下变量 n1 = 5，请使用 int 的提供的方法，得到该变量最少可以用多少个二进制位表示?</h4>

<h4 id="toc_7">8、布尔值分别有什么?</h4>

<h4 id="toc_8">9、阅读代码，请写出执行结果</h4>

<p>a = &quot;alex&quot;<br/>
b = a.capitalize() print(a)<br/>
print(b)</p>

<h4 id="toc_9">10、写代码，有如下变量，请按照要求实现每个功能 name = &quot; aleX&quot;</h4>

<p>a. 移除 name 变量对应的值两边的空格，并输入移除后的内容 b. 判断 name 变量对应的值是否以 &quot;al&quot; 开头，并输出结果<br/>
c. 判断 name 变量对应的值是否以 &quot;X&quot; 结尾，并输出结果<br/>
d. 将 name 变量对应的值中的 “l” 替换为 “p”，并输出结果 e. 将 name 变量对应的值根据 “l” 分割，并输出结果。<br/>
f. 请问，上一题 e 分割之后得到值是什么类型(可选)? g. 将 name 变量对应的值变大写，并输出结果<br/>
h. 将 name 变量对应的值变小写，并输出结果<br/>
i. 请输出 name 变量对应的值的第 2 个字符?<br/>
j. 请输出 name 变量对应的值的前 3 个字符?<br/>
k. 请输出 name 变量对应的值的后 2 个字符?<br/>
l. 请输出 name 变量对应的值中 “e” 所在索引位置?<br/>
m. 获取子序列，仅不包含最后一个字符。如: oldboy 则获取 oldbo; root 则获取 roo</p>

<h4 id="toc_10">21、字符串是否可迭代对象?如可以请使用 for 循环每一个元素?</h4>

<h4 id="toc_11">22、请用代码实现:</h4>

<p>a. 利用下划线将列表的每一个元素拼接成字符串，li = &quot;alexericrain&quot;<br/>
b. 利用下划线将列表的每一个元素拼接成字符串，li = <a href="%E5%8F%AF%E9%80%89">&#39;alex&#39;, &#39;eric&#39;, &#39;rain&#39;</a></p>

<h4 id="toc_12">23、Python2 中的 range 和 Python3 中的 range 的区别?</h4>

<h4 id="toc_13">24、实现一个整数加法计算器: 如:</h4>

<p>content = input(&#39;请输入内容:&#39;) # 如: 5+9 或 5+ 9 或 5 + 9</p>

<h4 id="toc_14">25、计算用户输入的内容中有几个十进制小数?几个字母? 如:</h4>

<p>content = input(&#39;请输入内容:&#39;) # 如:asduiaf878123jkjsfd-213928 </p>

<h4 id="toc_15">26、简述 int 和 9 等数字 以及 str 和 &quot;xxoo&quot; 等字符串的关系?</h4>

<h4 id="toc_16">27、制作趣味模板程序 需求:等待用户输入名字、地点、爱好，根据用户的名字和爱好进行任意现实</h4>

<p>如:敬爱可亲的 xxx，最喜欢在 xxx 地方干 xxx</p>

<h4 id="toc_17">28、制作随机验证码，不区分大小写。 流程:</h4>

<ul>
<li>用户执行程序</li>
<li>给用户显示需要输入的验证码 - 用户输入的值<br/>
  用户输入的值和显示的值相同时现实正确信息;否则继续生成随机验证码继续等待用户输入<br/>
生成随机验证码代码示例:</li>
</ul>

<h4 id="toc_18">29、开发敏感词语过滤程序，提示用户输入内容，如果用户输入的内容中包含特殊的字符: 如 &quot;苍老师&quot; &quot;东京热&quot;，则将内容替换为 ***</h4>

<h4 id="toc_19">30、制作表格</h4>

<p>循环提示用户输入:用户名、密码、邮箱 (要求用户输入的长度不超过 20 个字符，如果超过则只有前 20 个字符有效) 如果用户输入 q 或 Q 表示不再继续输入，将用户输入的内容以表格形式大隐</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 基础]]></title>
    <link href="www.anhaoker.com/15214289229123.html"/>
    <updated>2018-03-19T11:08:42+08:00</updated>
    <id>www.anhaoker.com/15214289229123.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">1、使用while偱环输入 1,2,3,4,5,6, 8,9,10</a>
</li>
<li>
<a href="#toc_1">2、求1-100的所有数的和</a>
</li>
<li>
<a href="#toc_2">3、输出1-100内的所有奇数</a>
</li>
<li>
<a href="#toc_3">4、输出1-100内的所有偶数</a>
</li>
<li>
<a href="#toc_4">5、求1-2+3-4+5...-99的所有数的和</a>
</li>
<li>
<a href="#toc_5">6、用户登陆（三次机 会重试）</a>
</li>
</ul>


<h4 id="toc_0">1、使用while偱环输入 1,2,3,4,5,6, 8,9,10</h4>

<pre><code class="language-text">#!/bin/env python3

num = 1
while num &lt; 11:
    if num == 7:
        pass
    else:
        print(num)
    num = num +1
</code></pre>

<h4 id="toc_1">2、求1-100的所有数的和</h4>

<pre><code class="language-text">#!/bin/env python3

n1 = 1
num = 0
while n1 &lt; 101:
    num = num + n1
    n1 = n1 +1
print(num)
</code></pre>

<h4 id="toc_2">3、输出1-100内的所有奇数</h4>

<pre><code class="language-text">#!/bin/env python3

n1 = 1
while n1 &lt; 101:
    if n1 % 2 == 0:
        pass
    else:
        print(n1)
    n1 = n1 + 1
</code></pre>

<h4 id="toc_3">4、输出1-100内的所有偶数</h4>

<pre><code class="language-text">#!/bin/env python3

n1 = 1
while n1 &lt; 101:
    if n1 % 2 == 0:
        print(n1)
    else:
        pass
    n1 = n1 + 1
</code></pre>

<h4 id="toc_4">5、求1-2+3-4+5...-99的所有数的和</h4>

<pre><code class="language-text">#!/bin/env python3

n1 = 1
num = 0
while n1 &lt; 100:
    temp = n1 % 2
    if temp == 0:
        num = num - n1
    else:
        num = num + n1
    n1 = n1 + 1

print(num)
</code></pre>

<h4 id="toc_5">6、用户登陆（三次机 会重试）</h4>

<pre><code class="language-text">#!/bin/env python3

user = &#39;root&#39;
passwd = &#39;root&#39;
print(&quot;正确的用户名为：root,密码为：root;你一共有三次机会&quot;)
count = 1
while count &lt; 4:
    u1 = input(&quot;请输入用户名： &quot;)
    if user == u1:
        p1 = input(&quot;请输入密码： &quot;)
        if passwd == p1:
            print(&quot;恭喜你输入的用户名和密码正确&quot;)
            break
        else:
            print(&quot;密码错误，请再次重试&quot;)
    else:
        print(&quot;用户名错误，请再次重试&quot;)
    count = count + 1
</code></pre>

]]></content>
  </entry>
  
</feed>
